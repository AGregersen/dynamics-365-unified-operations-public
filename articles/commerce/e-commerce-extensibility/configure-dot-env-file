---
# required metadata

title: Configure .env file
description: This topic describes how to configure a development environment .env file for Microsoft Dynamics 365 Commerce.
author: samjarawan
manager: annbe
ms.date: 10/01/2019
ms.topic: article
ms.prod: 
ms.service: dynamics-ax-retail
ms.technology: 

# optional metadata

# ms.search.form: 
audience: Application user
# ms.devlang: 
ms.reviewer: v-chgri
ms.search.scope: Retail, Core, Operations
# ms.tgt_pltfrm: 
ms.custom: 
ms.assetid: 
ms.search.region: Global
# ms.search.industry: 
ms.author: samjar
ms.search.validFrom: 2019-10-31
ms.dyn365.ops.version: Release 10.0.5

---
# Configure .env file

[!include [banner](../includes/preview-banner.md)]
[!include [banner](../includes/banner.md)]

This topic describes how to configure a development environment .env file for Microsoft Dynamics 365 Commerce.

## Overview

The .env file that comes as part of the Online SDK is a simple configuration text file that defines a set of variables used by the running node app within a development environment.

## Default .env file

The default .env file that comes with the Online SDK should look similar to below.

```
MSDyn365_APP_TYPE=partner
PORT=4000

### Partner Level Settings
# MSDyn365_HOST=<Partner Host Here>
# MSDyn365Commerce_BASEURL=<Retail Server Base URL Here>
# MSDyn365Commerce_CHANNELID=<Retail Server Channel ID Here>
# MSDyn365Commerce_CATALOGID=<Retail Server Catalog ID Here>
# MSDyn365Commerce_OUN=<Retail Server OUN Here>
# MSDyn365Commerce_BASEIMAGEURL=<Retail Server Base Image URL Here>
```
The two required variable are pre-set and the others are optional. The optional variables allow your development environment to target live environments to get data that is rendered within the local development Node server.

Below you will details on how to fill out each variable.

## MSDyn365_APP_TYPE
The **MSDyn365_APP_TYPE** variable is required and can only be set to **partner**.

## PORT
The **PORT** variable defined the port number used to preview your node application when the node server is started with the **yarn start** command.  The default is 4000.
An example URL on a development environment is **https://localhost:4000/version**

## MSDyn365_HOST
The **MSDyn365_HOST** variable is the domain name of your customer facing e-Commerce site.  When this variable is set, launching **https://localhost:4000/** on a development environment will locally render your e-Commerce site. If your site is protected with AAD credentials a username and password prompt will appear.
Example: MSDyn365_HOST=demo.fabrikam.com

## MSDyn365Commerce_BASEURL
The **MSDyn365Commerce_BASEURL** variable can be used to specify the Microsoft Dynamics 365 Retail server URL.  This will allow local de 


## Install Node.js

Node.js is a JavaScript runtime that is built on [Chrome's V8 JavaScript Engine](https://v8.dev/).

Go to the [Node.js site](https://nodejs.org), and download and install the latest Long Term Support (LTS) build.

If you rely on other versions of Node.js for other projects, we recommend that you use [Node Version Manager (nvm)](https://github.com/creationix/nvm) to help guarantee that each version runs in its own isolated environment.

## Install Yarn

Yarn is a dependency management tool that helps guarantee that you have all the latest packages that you require for e-Commerce extensibility.

Go to the [Yarn site](https://yarnpkg.com), and download and install the latest stable build.

## Install the Online SDK and Store Starter Kit

The Online SDK provides everything that you require to extend your online channel. It even lets you create new modules, data actions, and themes.

The SDK configuration package is available through the [Project.Rushmore GitHub repository](https://github.com/Microsoft/Project.Rushmore). Either download or clone the repo to a local folder on your development machine.

> [!NOTE]
> The whole SDK and Store Starter Kit (SSK) won't be downloaded and installed until you run the **yarn** command. For more information, see the [Download SDK dependencies](#download-sdk-dependencies) section later in this topic.

If you cloned the repo, you can remove the .git folder (the hidden directory under the root). You will use Yarn to pull down updated dependencies.

We recommend that you use a source code repository to manage your configuration changes. Many options are available, such as [Git](https://git-scm.com/downloads).

## Download SDK dependencies

To download the SDK dependency packages, follow these steps.

1. At a command prompt, go to the root folder of the e-Commerce SDK (**c:\\repos\\MyEcommerceSite** in the following example).
2. To get all the latest dependency packages that are required, run the **yarn** command.

    > [!IMPORTANT]
    > This step should be done after you've completed any update to the packages.json file.

    ```
    c:\repos\MyEcommerceSite>yarn
    ```

    This command can take several minutes to run.

## Run your Node app

To run your Node app, follow these steps.

1. Run the **yarn start** command to open the Node app.

    ```
    c:\repos\MyEcommerceSite>yarn start
    ```

This command can take up to a minute to run. When it's completed, you will see output that indicates that the server has been started. The output also shows the allocated port number (**4000**, by default).

2. To test that your Node app is running correctly, open the following URLs in a web browser:

    * `https://localhost:4000/version`
    * `https://localhost:4000/_sdk/allmodules`

3. To close the Node app, at the command prompt, press **Ctrl+C** two times.

## Create a new module

To add a new module that is named **campaignBanner**, run the **yarn msdyn365 add-module MODULE\_NAME** command. Here is an example.

```
c:\repos\MyEcommerceSite>yarn msdyn365 add-module campaignBanner
```

This command can take up to a minute to run. It adds a new module under \\src\\modules\\campaignBanner.

## Clone an existing core module

Several of the available core modules can be cloned, such as the alert, banner, and hero modules.

For example, to modify the hero module, run the **yarn msdyn365 clone STARTER\_KIT\_MODULE\_NAME NEW\_MODULE\_NAME** command to pull down the source code. Here is an example.

```
c:\repos\MyEcommerceSite>yarn msdyn365 clone hero heroExtended
```

You can find the hero module under \\src\\modules\\heroExtended.

## Preview modules

To preview a specific module (for example, campaignBanner) in a local web browser, follow these steps.

1. At a command prompt, open your Node app by running the **yarn start** command.

    ```
    c:\repos\MyEcommerceSite>yarn start
    ```

1. In a web browser, open the following URLs. Notice the module name in the **"type=MODULE\_NAME"** query string parameter.

    * `https://localhost:4000/modules?type=campaignBanner`
    * `https://localhost:4000/modules?type=hero`
    * `https://localhost:4000/modules?type=banner`
    
## Adding an SSL certificate

The Dynamics 365 online SDK installs a self-signed SSL certificate for developing and testing on a local environment which work against localhost.  You can find these files inside the **.ssl** folder under the root SDK folder.  Note:  *yarn start* must be run at least once for these files to be generated.

To install a new certificate on a developer environment, replace the public key (cert.pem) and private key (key.pem) files with your own.
